Action Tracker

Please visit https://pure-thicket-67263.herokuapp.com. This is homepage for this app.

Below are Model Details and DB structure

Model 1:- User table. /model/user.rb  --> this holds the user name

|--User Name--|

Model 2:- ActionList. /model/action_list.rb --> this holds the action label and description.

|--Name--|--Description--|


Model 3:- LogAction. /model/log_action.rb  --> This is a join table for many to many relationship between model 1 and model 2.
A user has many task and task has many users through log_actions table. All the actions that user will be logging thru will be
stored in this table. To achieve the first part of this task we have log_task method inside log_actions_controller. Each user can enter his task in its show page. Form can be seen in /views/users/show.html.erb.

|--User_id--|--Action_list_id--|--created_at--|


Model 3:- AnalyseAction. /model/analyse_action.rb. --> This table contains pair of an action with all other action. Action_name1 columns pairs with action_name2 column and for each action_name1 the count of occurence of action_name2 w.r.t immediate, weekly, monthly, yearly and lifetime is stored in respective columns. If there are two actions namely "A" and "B" than below is the table example. The below table shows that action B occured 2 times immediately w.r.t A and action A occurred 3 times immediately w.r.t action B.

|--Action Name1--|--Action Name2--|--Immediate--|--Weekly--|--Monthly--|--Yearly--|--Lifetime--|


To check how Analyse Action will work please visit https://pure-thicket-67263.herokuapp.com/action_lists and select Task A analysis. Each time a new action is added to action_list table the pairing of the new action with every other action is taken care by add_analyse method inside /helpers/analyse_actions_helper.rb. This is called by create action inside action_lists_controller. Every pairs are stored in this model.

Each time user logs an action the log_task method inside log_actions_controller calls the update_analyse method inside AnalyseAction helper. It loops thru model 3 for all actions which pairs with this logged in action of user and based on the time difference between them it increments the counts of respective immideate, weekly etc columns.

Part 2 of task which is calculating probability and populating immediate, weekly etc probabilities for all associated actions. This is handled by extract_action_info method inside AnalyseAction helper. For each action_list show method we call this action. This extract_action_info creates a multi dimensional array. This array contains each paired action name along with its probaility to occur on various timelines. Same is sent to show action and retrieved by show view.


For larger databases and huge action log table the same DB schema can be used. Only changes that will be required will be to
use update_analyse inside AnalyseAction as a delayed job. We can use Sidekiq with Redis for this. DB schema will remain unchanged. Since updating of model 3 DB is delayed hence real time analysis will not be possible